＊登録について
前提条件として
★CRUD操作について
★本来だったら、、
●<URL>CRUDの数だけURLを登録しなければならない→つまり、作成、詳細、更新、削除、、、等
モデルの一覧を取得するエンドポイント: GET /api/<model>/
新しいモデルインスタンスを作成するエンドポイント: POST /api/<model>/
特定のモデルインスタンスの詳細を取得するエンドポイント: GET /api/<model>/<pk>/
特定のモデルインスタンスを更新するエンドポイント: PUT /api/<model>/<pk>/
特定のモデルインスタンスの一部を更新するエンドポイント: PATCH /api/<model>/<pk>/
特定のモデルインスタンスを削除するエンドポイント: DELETE /api/<model>/<pk>/
<ビュー>CRUDと同じ数のclassをそれぞれ作らなければならない。。getとかsetは自動で呼ばれるみたいだが、、、
●CRUDの数だけ
from rest_framework.views import APIView
from rest_framework.response import Response
from .models import Book

class BookListView(APIView):
    def get(self, request):
        books = Book.objects.all()
        data = [{"title": book.title, "author": book.author} for book in books]
        return Response(data)

class BookDetailView(APIView):
    def get(self, request, pk):
        try:
            book = Book.objects.get(pk=pk)
            data = {"title": book.title, "author": book.author}
            return Response(data)
        except Book.DoesNotExist:
            return Response({"message": "Book not found"}, status=404)

＊あと前提として、手動でCRUDを使うにはAPIViewを使わないとだめよ！！！













前提としては
モデルの一覧を取得するエンドポイント: GET /api/<model>/
新しいモデルインスタンスを作成するエンドポイント: POST /api/<model>/
特定のモデルインスタンスの詳細を取得するエンドポイント: GET /api/<model>/<pk>/
特定のモデルインスタンスを更新するエンドポイント: PUT /api/<model>/<pk>/
特定のモデルインスタンスの一部を更新するエンドポイント: PATCH /api/<model>/<pk>/
特定のモデルインスタンスを削除するエンドポイント: DELETE /api/<model>/<pk>/
*<pk>はプライマリーキーの略