ログイン機能のまとめ
●セキュリティを無視した本当に機能だけを考えると
【新規登録】
1.ユーザーとパスワードを送信(リクエスト)★
2.ユーザーとパスワードを受け取って、データーベースにそのまま保存する指示をする(サーバー)★
3.実際にデーターベースにそのまま保存される(データベース)
4.保存が成功したか失敗したかをそのままレスポンスに返す(レスポンス)★
【ログイン】
1.ユーザーとパスワードを送信(リクエスト)
2.ユーザーとパスワードを受け取る(サーバー)
3.リクエストのユーザーとパスワードが合致しているか確認する(サーバー)
4.ログインが成功したか失敗したかをそのままレスポンスに返す(レスポンス)
●今のところ★のついている通信とDBには不正アクセスされる可能性がある
ミッションとしては『平文』のパスワードを相手に特定されないということ
⇒なぜ？
サーバーには侵入される可能性は『低い』
⇒なので、暗号化されたパスワードを盗まれても、3.リクエストのユーザーとパスワードが合致しているか確認する(サーバー)という作業を乗っ取ってやるというのは考えにくい
＊＊つまり、平文のパスワードを盗んで、通常のクライアントからログインされたり、cirlコマンドでログインされることさえなければOKなのだ！

上記のコードの問題
1.リクエスト、レスポンスが丸腰
2.DBが丸腰


●2.DBが丸腰について説明しましょう。
DBに不正アクセスされる方法は基本以下のような感じです
⇒もちろんこれはこれで大事なことで、絶対やらなくてはいけません
1.SQLインジェクション: ユーザーが提供するデータが不正にSQLクエリに挿入され、データベースが意図せず操作される可能性があります。
2.クロスサイトスクリプティング (XSS): ユーザーが提供するデータが不正にJavaScriptコードに挿入され、他のユーザーに対して実行される可能性があります。
3.クロスサイトリクエストフォージェリ (CSRF): ユーザーが意図しない形でリクエストを送信することによって、不正なアクションが実行される可能性があります。
4.不正な認証: 不正な手段で認証を回避してシステムにアクセスしようとする試みがあります。

でも、念には念を込めて、万が一突破されたときのこともしっかり考えておきましょう。
問題は、DBの中身がそのまま抜かれた場合、もうオワコンです。。。。
なので、盗まれたときに、侵入者から、なんだこれ？使えねぇという『平文を解読できない』という状態を作りましょう

そこで
＊＊＊＊＊＊『平文＋ソルトをSHA256でハッシュ化』してあげることが大事です＊＊＊＊
まず説明します
1.平文⇒元のパスワード。これを盗まれたら終わり
2.ソルト⇒保存する作業が発生するごとに作成される『ランダム』な値
3.SHA256⇒元の文章を暗号化するアルゴリズム(計算式)『ランダム』ではありません。そして、『SHA256で暗号化されたらもとに戻すのがほぼ不可能』！！

なるほど、、
ん？でも、『SHA256で暗号化されたらもとに戻すのがほぼ不可能』なのであれば1と3が別にソルトなんかいらなくない？と、、

ここでもう一つのキーワード。『ランダム』であるかどうかということ

万が一侵入者がDBにアクセスして行う可能性があること
1.お！ラッキー！俺のハッシュ値と全く一緒の組み合わせのユーザーがいるじゃん！ていうことはこいつのパスワードと俺のパスワードって一緒だな！
2.この膨大なデータを使って組み合わせの共通点を探すぞ(レインボー攻撃)！！
という可能性もあるわけだ、、、
⇒共通点を隠すこと！が大事になってくる
そうなると、ユーザーごとに一意のランダムの値があればいいよね。
というのがソルトの役目である。

じゃあ、ハッシュ化された値をそのままDBにアクセスされる可能性ってないの、、？
⇒実際あるんだよ！だからこそさっきの
1.SQLインジェクション: 不正なSQLクエリが挿入され、データベースが意図せず操作される可能性があります。これは適切な入力検証とパラメータ化されたクエリを使用することで防ぐことができます。
2.セッションハイジャック: SSLなどを使用して通信を暗号化することで、通信経路でのデータの傍受や改ざんを防ぐことができます。
3.不正アクセス: 不正な手段で認証を回避してシステムにアクセスしようとする試みがある可能性があります。適切な認証とアクセス制御を実装することが重要です。
4.クロスサイトスクリプティング (XSS): ユーザーが提供するデータが不正にJavaScriptコードに挿入され、他のユーザーに対して実行される可能性があります。入力データのエスケープや適切なサニタイズが必要です。
この4つでそもそもDBにアクセスされないということが大事になるんだ。

となると怖いのが、DBにアクセスされて、ハッシュ化された値を使って取られることだよね、、

結論は、暗号化は『正面突破(クライアントや、cirl)を防ぐ手段』ということであり、
そもそもDBにアクセスされないことが大事です。そのために
1.適切なアクセス制御
2.ログの監視
3.通信の暗号化
この３つはしっかりやっておきましょう！



